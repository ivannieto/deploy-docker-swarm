# -*- mode: ruby -*-
# vi: set ft=ruby :

# Todo: Use config plugin, which is much easier: https://github.com/maoueh/nugrant
require 'yaml'
settings = YAML.load_file 'config.yml'

# -- Getting configuration from config.ml
NUM_OF_MANAGERS=settings['NUM_OF_MANAGERS']
MEMORY_MANAGER=settings['MEMORY_MANAGER']
NUM_CPUS_MANAGER=settings['NUM_CPUS_MANAGER']

NUM_OF_WORKERS=settings['NUM_OF_WORKERS']
MEMORY_WORKER=settings['MEMORY_WORKER']
NUM_CPUS_WORKER=settings['NUM_CPUS_WORKER']

VIDEO_MEMORY=settings['VIDEO_MEMORY']
UPDATE_MACHINES=settings['UPDATE_MACHINES']

VBGUEST_UPDATE=settings['VBGUEST_UPDATE']
VBGUEST_NO_REMOTE=settings['VBGUEST_NO_REMOTE']

SWARM_INIT_MANAGERS=settings['SWARM_INIT_MANAGERS']
SWARM_INIT_WORKERS=settings['SWARM_INIT_WORKERS']
SWARM_DEPLOY_STACK=settings['SWARM_DEPLOY_STACK']

# -- Install the required plugins
require File.dirname(__FILE__)+"/lib/dependency_manager"
check_plugins ["vagrant-host-shell", "vagrant-vbguest"]

# -- Internal variables
VAGRANTFILE_API_VERSION = "2"

@deleteTokens = <<SHELL
  rm -rf /vagrant/.vagrant/swarm-token
SHELL

@initManager = <<SHELL
echo initManager Arguments: $*
# Todo: @deleteTokens is the solutions, just have to trigger it here ...
if [ ! -d "/vagrant/.vagrant/swarm-token" ]; then
  mkdir /vagrant/.vagrant/swarm-token
  chmod 777 /vagrant/.vagrant/swarm-token

  swarm_manager_ip=$2

  echo $swarm_manager_ip > /vagrant/.vagrant/swarm-manager-ip

  docker swarm init --advertise-addr $swarm_manager_ip:2377
  docker swarm join-token -q manager > /vagrant/.vagrant/swarm-token/manager
  docker swarm join-token -q worker > /vagrant/.vagrant/swarm-token/worker
  #docker stack deploy --compose-file /vagrant/docker-stack.yml vote
else
  docker swarm join \
    --token `cat /vagrant/.vagrant/swarm-token/manager` \
    `cat /vagrant/.vagrant/swarm-manager-ip`:2377
fi
SHELL

@initWorker = <<SHELL
  docker swarm join \
    --token `cat  /vagrant/.vagrant/swarm-token/worker` \
    `cat /vagrant/.vagrant/swarm-manager-ip`:2377
SHELL

@showResults = <<SHELL

  echo "PLAY WITH IT:";
  echo "";
  echo "";

SHELL

@deploySwarm = <<SHELL

  cd /vagrant;
  ls -la;

  docker stack deploy \
    --compose-file /vagrant/docker-stack.yml \
    vote;
SHELL

@cleanUp = <<SHELL
  rm -rf /vagrant/.vagrant/swarm-token;
  rm -rf /vagrant/.vagrant/swarm-manager-ip;
SHELL

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  # -- cleanup Script, currently done by the destroy.sh file
  # -- cleaning it here as a lot of negative side effects, that's why we keep it disabled for now.
  #config.vm.provision "shell", inline: @cleanUp

  # -- General configurations
  config.vm.box = "ubuntu/trusty64"
  config.vm.provision "docker"

  config.vm.provider 'virtualbox' do |v|
    v.linked_clone = true if Vagrant::VERSION =~ /^1.8/
  end

  # set auto_update to false, if you do NOT want to check the correct
  # additions version when booting this machine
  # Note: as there is a bug in VirtualBox v5.1.20, disable it
  #   (more info: http://stackoverflow.com/questions/42074246/vagrant-error-unable-to-mount-virtualbox-shared-folders-guest-additions-vboxs)
  config.vbguest.auto_update = VBGUEST_UPDATE

  # -- do NOT download the iso file from a webserver
  config.vbguest.no_remote = VBGUEST_NO_REMOTE

  # -- Make it even more unsecure to be able to login locally
  config.ssh.username = "vagrant"
  config.ssh.password = "vagrant"
  config.ssh.insert_key = false
  #config.ssh.port = 2222

  # -- Prevent the "stdin: is not a tty" error
  config.ssh.shell = "bash -c 'BASH_ENV=/etc/profile exec bash'"

  (1..NUM_OF_MANAGERS).each do |mgrNumber|
    config.vm.define "manager-#{mgrNumber}" do |node|
      node.vm.hostname = "manager-#{mgrNumber}"
      node.vm.network "private_network", ip: "192.168.50.#{99+mgrNumber}"
      node.vm.network "public_network", bridge: ["en1", "en6"]

      # -- Setting up port-forwardings if defined as such
      if (settings['FORWARDED_PORTS'] && mgrNumber == 1)
        settings['FORWARDED_PORTS'].each do |forwarded_port|
          #puts "#{private_network}"
          config.vm.network "forwarded_port", 
            id: "#{forwarded_port['id']}",
            guest: "#{forwarded_port['guest']}", 
            host: "#{forwarded_port['host']}", 
            host_ip: "#{forwarded_port['host_ip']}",
            protocol: "#{forwarded_port['protocol'] || 'tcp'}",
            auto_correct: forwarded_port['auto_correct'] || false,
            disabled: forwarded_port['auto_correct'] || false
        end #each
      end #if
      
      node.vm.provider "virtualbox" do |v|
        v.memory = MEMORY_MANAGER
        v.cpus = NUM_CPUS_MANAGER
        v.name = "manager-#{mgrNumber}"
        v.customize ["modifyvm", :id, "--vram", VIDEO_MEMORY]
      end

      if (UPDATE_MACHINES)
        node.vm.provision "shell", inline: "sudo apt-get update"
      end #if

      if (SWARM_INIT_MANAGERS)
        node.vm.provision "shell", inline: @initManager, args: [ "#{NUM_OF_MANAGERS}" , "192.168.50.#{99+mgrNumber}", "#{mgrNumber}" ]
      end #if

    end
  end

  (1..NUM_OF_WORKERS).each do |workerNumber|
    config.vm.define "worker-#{workerNumber}" do |node|
      node.vm.hostname = "worker-#{workerNumber}"
      node.vm.network "private_network", ip: "192.168.50.#{149+workerNumber}"
      node.vm.network "public_network", bridge: ["en1", "en6"]

      node.vm.provider "virtualbox" do |v|
        v.memory = MEMORY_WORKER
        v.cpus = NUM_CPUS_WORKER
        v.name = "worker-#{workerNumber}"
        v.customize ["modifyvm", :id, "--vram", VIDEO_MEMORY]
      end

      if (UPDATE_MACHINES)
        node.vm.provision "shell", inline: "sudo apt-get update"
      end #if

      if (SWARM_INIT_MANAGERS) && (SWARM_INIT_WORKERS)
        node.vm.provision "shell", inline: @initWorker
      end #if

      # Todo: Not really nice, but couldn't find any better way to provision one of the managers at "the end" of the process
      # Todo: This ugly hack is actually the main reason why this solution is not really nice and a combination of
      #   - vagrant & bash
      #   - vagrant & ansible
      # might be the better and more stable approach.

      # Any hint welcome how to improve this ...
      if (NUM_OF_WORKERS == workerNumber) && (SWARM_DEPLOY_STACK)
        node.vm.provision :host_shell do |host_shell|
          host_shell.inline = 'mkdir .tmp';
          host_shell.inline = 'cp ./../lib/docker-stack.yml .tmp';
          host_shell.inline = 'vagrant ssh manager-1 -- docker stack deploy --compose-file=/vagrant/.tmp/docker-stack.yml vote';
          host_shell.inline = 'rm -rf .tmp';
        end
        #node.vm.provision "shell", inline: "ssh vagrant@manager-1 docker stack deploy --compose-file /vagrant/docker-stack.yml vote"
      end #if

    end
  end

end
